<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTML 中的 JavaScript on Hi Web</title><link>https://hi-web.io/docs/javascript/2/</link><description>Recent content in HTML 中的 JavaScript on Hi Web</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="https://hi-web.io/docs/javascript/2/index.xml" rel="self" type="application/rss+xml"/><item><title>&lt;script> 元素</title><link>https://hi-web.io/docs/javascript/2/2.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-web.io/docs/javascript/2/2.1/</guid><description>&amp;lt;script&amp;gt; 元素 # 将 JavaScript 插入 HTML 的主要方法是使用元素。这个元素是由网景公司创造出来，并最早在 Netscape Navigator 2 中实现的。后来，这个元素被正式加入到 HTML 规范。元素有下列 8 个属性。
async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。 charset：可选。使用 src 属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。 crossorigin：可选。配置相关请求的 CORS（跨源资源共享）设置。默认不使用 CORS。crossorigin=&amp;ldquo;anonymous&amp;quot;配置文件请求不必设置凭据标志。crossorigin=&amp;ldquo;use-credentials&amp;quot;设置凭据标志，意味着出站请求会包含凭据。 defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。在 IE7 及更早的版本中，对行内脚本也可以指定这个属性。 integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容。 language：废弃。最初用于表示代码块中的脚本语言（如&amp;quot;JavaScript&amp;rdquo;、&amp;ldquo;JavaScript 1.2&amp;quot;或&amp;quot;VBScript&amp;rdquo;）。大多数浏览器都会忽略这个属性，不应该再使用它。 src：可选。表示包含要执行的代码的外部文件。 type：可选。代替 language，表示代码块中脚本语言的内容类型（也称 MIME 类型）。按照惯例，这个值始终都是&amp;quot;text/javascript&amp;rdquo;，尽管&amp;quot;text/javascript&amp;quot;和&amp;quot;text/ecmascript&amp;quot;都已经废弃了。JavaScript 文件的 MIME 类型通常是&amp;quot;application/x-javascript&amp;quot;，不过给 type 属性这个值有可能导致脚本被忽略。在非 IE 的浏览器中有效的其他值还有&amp;quot;application/javascript&amp;quot;和&amp;quot;application/ecmascript&amp;quot;。如果这个值是 module，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 import 和 export 关键字。 使用 &amp;lt;script&amp;gt; 的方式有两种：通过它直接在网页中嵌入 JavaScript 代码，以及通过它在网页中包含外部 JavaScript 文件。
要嵌入行内 JavaScript 代码，直接把代码放在 &amp;lt;script&amp;gt; 元素中就行：
&amp;lt;script&amp;gt; function sayHi() { console.</description></item><item><title>行内代码与外部文件</title><link>https://hi-web.io/docs/javascript/2/2.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-web.io/docs/javascript/2/2.2/</guid><description>行内代码与外部文件 # 虽然可以直接在 HTML 文件中嵌入 JavaScript 代码，但通常认为最佳实践是尽可能将 JavaScript 代码放在外部文件中。不过这个最佳实践并不是明确的强制性规则。推荐使用外部文件的理由如下。
可维护性。JavaScript 代码如果分散到很多 HTML 页面，会导致维护困难。而用一个目录保存所有 JavaScript 文件，则更容易维护，这样开发者就可以独立于使用它们的 HTML 页面来编辑代码。 缓存。浏览器会根据特定的设置缓存所有外部链接的 JavaScript 文件，这意味着如果两个页面都用到同一个文件，则该文件只需下载一次。这最终意味着页面加载更快。 适应未来。通过把 JavaScript 放到外部文件中，就不必考虑用 XHTML 或前面提到的注释黑科技。包含外部 JavaScript 文件的语法在 HTML 和 XHTML 中是一样的。 在配置浏览器请求外部文件时，要重点考虑的一点是它们会占用多少带宽。在 SPDY/HTTP2 中，预请求的消耗已显著降低，以轻量、独立 JavaScript 组件形式向客户端送达脚本更具优势。
比如，第一个页面包含如下脚本：
&amp;lt;script src=&amp;#34;mainA.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;component1.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;component2.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;component3.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; ... 后续页面可能包含如下脚本：
&amp;lt;script src=&amp;#34;mainB.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;component3.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;component4.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;component5.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; ... 在初次请求时，如果浏览器支持 SPDY/HTTP2，就可以从同一个地方取得一批文件，并将它们逐个放到浏览器缓存中。从浏览器角度看，通过 SPDY/HTTP2 获取所有这些独立的资源与获取一个大 JavaScript 文件的延迟差不多。
在第二个页面请求时，由于你已经把应用程序切割成了轻量可缓存的文件，第二个页面也依赖的某些组件此时已经存在于浏览器缓存中了。
当然，这里假设浏览器支持 SPDY/HTTP2，只有比较新的浏览器才满足。如果你还想支持那些比较老的浏览器，可能还是用一个大文件更合适。</description></item><item><title>文档模式</title><link>https://hi-web.io/docs/javascript/2/2.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-web.io/docs/javascript/2/2.3/</guid><description>文档模式 # IE5.5 发明了文档模式的概念，即可以使用 doctype 切换文档模式。最初的文档模式有两种：混杂模式（quirks mode）和标准模式（standards mode）。前者让 IE 像 IE5 一样（支持一些非标准的特性），后者让 IE 具有兼容标准的行为。虽然这两种模式的主要区别只体现在通过 CSS 渲染的内容方面，但对 JavaScript 也有一些关联影响，或称为副作用。
IE 初次支持文档模式切换以后，其他浏览器也跟着实现了。随着浏览器的普遍实现，又出现了第三种文档模式：准标准模式（almost standards mode）。这种模式下的浏览器支持很多标准的特性，但是没有标准规定得那么严格。主要区别在于如何对待图片元素周围的空白（在表格中使用图片时最明显）。
混杂模式在所有浏览器中都以省略文档开头的 doctype 声明作为开关。这种约定并不合理，因为混杂模式在不同浏览器中的差异非常大，不使用黑科技基本上就没有浏览器一致性可言。
标准模式通过下列几种文档类型声明开启：
&amp;lt;!-- HTML 4.01 Strict --&amp;gt; &amp;lt;!DOCTYPE html PUBLIC &amp;#34;-//W3C//DTD HTML 4.01//EN&amp;#34; &amp;#34;http://www.w3.org/TR/html4/strict.dtd&amp;#34;&amp;gt; &amp;lt;!-- XHTML 1.0 Strict --&amp;gt; &amp;lt;!DOCTYPE html PUBLIC &amp;#34;-//W3C//DTD XHTML 1.0 Strict//EN&amp;#34; &amp;#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;#34;&amp;gt; &amp;lt;!-- HTML5 --&amp;gt; &amp;lt;!DOCTYPE html&amp;gt; 准标准模式通过过渡性文档类型（Transitional）和框架集文档类型（Frameset）来触发：
&amp;lt;!-- HTML 4.01 Transitional --&amp;gt; &amp;lt;!DOCTYPE html PUBLIC &amp;#34;-//W3C//DTD HTML 4.01 Transitional//EN&amp;#34; &amp;#34;http://www.</description></item><item><title>&lt;noscript> 元素</title><link>https://hi-web.io/docs/javascript/2/2.4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-web.io/docs/javascript/2/2.4/</guid><description>&amp;lt;noscript&amp;gt; 元素 # 针对早期浏览器不支持 JavaScript 的问题，需要一个页面优雅降级的处理方案。最终，&amp;lt;noscript&amp;gt; 元素出现，被用于给不支持 JavaScript 的浏览器提供替代内容。虽然如今的浏览器已经 100%支持 JavaScript，但对于禁用 JavaScript 的浏览器来说，这个元素仍然有它的用处。
&amp;lt;noscript&amp;gt; 元素可以包含任何可以出现在 &amp;lt;body&amp;gt; 中的 HTML 元素，&amp;lt;script&amp;gt; 除外。在下列两种情况下，浏览器将显示包含在 &amp;lt;noscript&amp;gt; 中的内容：
浏览器不支持脚本； 浏览器对脚本的支持被关闭。 任何一个条件被满足，包含在 &amp;lt;noscript&amp;gt; 中的内容就会被渲染。否则，浏览器不会渲染 &amp;lt;noscript&amp;gt; 中的内容。
下面是一个例子：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Example HTML Page&amp;lt;/title&amp;gt; &amp;lt;script defer=&amp;#34;defer&amp;#34; src=&amp;#34;example1.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script defer=&amp;#34;defer&amp;#34; src=&amp;#34;example2.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;noscript&amp;gt; &amp;lt;p&amp;gt;This page requires a JavaScript-enabled browser.&amp;lt;/p&amp;gt; &amp;lt;/noscript&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 这个例子是在脚本不可用时让浏览器显示一段话。如果浏览器支持脚本，则用户永远不会看到它。</description></item><item><title>小结</title><link>https://hi-web.io/docs/javascript/2/2.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-web.io/docs/javascript/2/2.5/</guid><description>小结 # JavaScript 是通过 &amp;lt;script&amp;gt; 元素插入到 HTML 页面中的。这个元素可用于把 JavaScript 代码嵌入到 HTML 页面中，跟其他标记混合在一起，也可用于引入保存在外部文件中的 JavaScript。本篇的重点可以总结如下。
要包含外部 JavaScript 文件，必须将 src 属性设置为要包含文件的 URL。文件可以跟网页在同一台服务器上，也可以位于完全不同的域。 所有 &amp;lt;script&amp;gt; 元素会依照它们在网页中出现的次序被解释。在不使用 defer 和 async 属性的情况下，包含在 &amp;lt;script&amp;gt; 元素中的代码必须严格按次序解释。 对不推迟执行的脚本，浏览器必须解释完位于 &amp;lt;script&amp;gt; 元素中的代码，然后才能继续渲染页面的剩余部分。为此，通常应该把 &amp;lt;script&amp;gt; 元素放到页面末尾，介于主内容之后及 &amp;lt;/body&amp;gt; 标签之前。 可以使用 defer 属性把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出的次序执行。 可以使用 async 属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异步脚本不能保证按照它们在页面中出现的次序执行。 -通过使用 &amp;lt;noscript&amp;gt; 元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持并启用脚本，则 &amp;lt;noscript&amp;gt; 元素中的任何内容都不会被渲染。</description></item></channel></rss>