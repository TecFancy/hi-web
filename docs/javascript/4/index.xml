<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>变量、作用域与内存 on Hi Web</title><link>https://hi-web.io/docs/javascript/4/</link><description>Recent content in 变量、作用域与内存 on Hi Web</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="https://hi-web.io/docs/javascript/4/index.xml" rel="self" type="application/rss+xml"/><item><title>原始值与引用值</title><link>https://hi-web.io/docs/javascript/4/4.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-web.io/docs/javascript/4/4.1/</guid><description>原始值与引用值 # ECMAScript 变量可以包含两种不同类型的数据：原始值和引用值。原始值（primitive value）就是最简单的数据，引用值（reference value）则是由多个值构成的对象。
在把一个值赋给变量时，JavaScript 引擎必须确定这个值是原始值还是引用值。上一章讨论了 6 种原始值：Undefined、Null、Boolean、Number、String 和 Symbol。保存原始值的变量是按值（by value）访问的，因为我们操作的就是存储在变量中的实际值。
引用值是保存在内存中的对象。与其他语言不同，JavaScript 不允许直接访问内存位置，因此也就不能直接操作对象所在的内存空间。在操作对象时，实际上操作的是对该对象的引用（reference）而非实际的对象本身。为此，保存引用值的变量是按引用（by reference）访问的。
注意 在很多语言中，字符串是使用对象表示的，因此被认为是引用类型。ECMAScript 打破了这个惯例。 动态属性 # 原始值和引用值的定义方式很类似，都是创建一个变量，然后给它赋一个值。不过，在变量保存了这个值之后，可以对这个值做什么，则大有不同。对于引用值而言，可以随时添加、修改和删除其属性和方法。比如，看下面的例子：
let person = new Object(); person.name = &amp;#34;Nicholas&amp;#34;; console.log(person.name); // &amp;#34;Nicholas&amp;#34; 这里，首先创建了一个对象，并把它保存在变量 person 中。然后，给这个对象添加了一个名为 name 的属性，并给这个属性赋值了一个字符串&amp;quot;Nicholas&amp;quot;。在此之后，就可以访问这个新属性，直到对象被销毁或属性被显式地删除。
原始值不能有属性，尽管尝试给原始值添加属性不会报错。比如：
let name = &amp;#34;Nicholas&amp;#34;; name.age = 27; console.log(name.age); // undefined 在此，代码想给字符串 name 定义一个 age 属性并给该属性赋值 27。紧接着在下一行，属性不见了。记住，只有引用值可以动态添加后面可以使用的属性。
注意，原始类型的初始化可以只使用原始字面量形式。如果使用的是 new 关键字，则 JavaScript 会创建一个 Object 类型的实例，但其行为类似原始值。下面来看看这两种初始化方式的差异：
let name1 = &amp;#34;Nicholas&amp;#34;; let name2 = new String(&amp;#34;Matt&amp;#34;); name1.</description></item></channel></rss>