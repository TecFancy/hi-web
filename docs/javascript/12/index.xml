<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BOM on Hi Web</title><link>https://hi-web.io/docs/javascript/12/</link><description>Recent content in BOM on Hi Web</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="https://hi-web.io/docs/javascript/12/index.xml" rel="self" type="application/rss+xml"/><item><title>window 对象</title><link>https://hi-web.io/docs/javascript/12/12.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-web.io/docs/javascript/12/12.1/</guid><description>window 对象 # BOM 的核心是 window 对象，表示浏览器的实例。window 对象在浏览器中有两重身份，一个是 ECMAScript 中的 Global 对象，另一个就是浏览器窗口的 JavaScript 接口。这意味着网页中定义的所有对象、变量和函数都以 window 作为其 Global 对象，都可以访问其上定义的 parseInt()等全局方法。
注意 因为 window 对象的属性在全局作用域中有效，所以很多浏览器 API 及相关构造函数都以 window 对象属性的形式暴露出来。这些 API 将在全书各章中介绍，特别是第 20 章。
另外，由于实现不同，某些 window 对象的属性在不同浏览器间可能差异很大。本篇不会介绍已经废弃的、非标准化或特定于浏览器的 window 属性。
Global 作用域 # 因为 window 对象被复用为 ECMAScript 的 Global 对象，所以通过 var 声明的所有全局变量和函数都会变成 window 对象的属性和方法。比如：
var age = 29; var sayAge = () =&amp;gt; alert(this.age); alert(window.age); // 29 sayAge(); // 29 window.sayAge(); // 29 这里，变量 age 和函数 sayAge()被定义在全局作用域中，它们自动成为了 window 对象的成员。因此，变量 age 可以通过 window.</description></item></channel></rss>