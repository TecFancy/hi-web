<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>集合引用类型 on Hi Web</title><link>https://hi-web.io/docs/javascript/6/</link><description>Recent content in 集合引用类型 on Hi Web</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="https://hi-web.io/docs/javascript/6/index.xml" rel="self" type="application/rss+xml"/><item><title>Object</title><link>https://hi-web.io/docs/javascript/6/6.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-web.io/docs/javascript/6/6.1/</guid><description>Object # 到目前为止，大多数引用值的示例使用的是 Object 类型。Object 是 ECMAScript 中最常用的类型之一。虽然 Object 的实例没有多少功能，但很适合存储和在应用程序间交换数据。
显式地创建 Object 的实例有两种方式。第一种是使用 new 操作符和 Object 构造函数，如下所示：
let person = new Object(); person.name = &amp;#34;Nicholas&amp;#34;; person.age = 29; 另一种方式是使用对象字面量（object literal）表示法。对象字面量是对象定义的简写形式，目的是为了简化包含大量属性的对象的创建。比如，下面的代码定义了与前面示例相同的 person 对象，但使用的是对象字面量表示法：
let person = { name: &amp;#34;Nicholas&amp;#34;, age: 29, }; 在这个例子中，左大括号（{）表示对象字面量开始，因为它出现在一个表达式上下文（expression context）中。在 ECMAScript 中，表达式上下文指的是期待返回值的上下文。赋值操作符表示后面要期待一个值，因此左大括号表示一个表达式的开始。同样是左大括号，如果出现在语句上下文（statement context）中，比如 if 语句的条件后面，则表示一个语句块的开始。
接下来指定了 name 属性，后跟一个冒号，然后是属性的值。逗号用于在对象字面量中分隔属性，因此字符串&amp;quot;Nicholas&amp;quot;后面有一个逗号，而 29 后面没有，因为 age 是这个对象的最后一个属性。在最后一个属性后面加上逗号在非常老的浏览器中会导致报错，但所有现代浏览器都支持这种写法。
在对象字面量表示法中，属性名可以是字符串或数值，比如：
let person = { name: &amp;#34;Nicholas&amp;#34;, age: 29, 5: true, }; 这个例子会得到一个带有属性 name、age 和 5 的对象。注意，数值属性会自动转换为字符串。</description></item></channel></rss>